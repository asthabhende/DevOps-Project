Day 03 — Orchestrate Application with Kubernetes
1️⃣ Deployment for Database

postgres-deployment.yaml:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-db
  template:
    metadata:
      labels:
        app: todo-db
    spec:
      containers:
      - name: postgres
        image: postgres:15
        env:
        - name: POSTGRES_USER
          value: todo
        - name: POSTGRES_PASSWORD
          value: todo123
        - name: POSTGRES_DB
          value: todoapp
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: db-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: db-storage
        persistentVolumeClaim:
          claimName: db-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: todo-db
spec:
  ports:
  - port: 5432
  selector:
    app: todo-db

2️⃣ Deployment for ToDo App

todoapp-deployment.yaml:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: todo-app
  template:
    metadata:
      labels:
        app: todo-app
    spec:
      containers:
      - name: todo-app
        image: your-dockerhub-username/todoapp:latest
        env:
        - name: DATABASE_URL
          value: postgresql://todo:todo123@todo-db:5432/todoapp
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: todo-service
spec:
  type: NodePort
  ports:
  - port: 5000
    targetPort: 5000
    nodePort: 30080
  selector:
    app: todo-app


Apply files:

kubectl apply -f postgres-deployment.yaml
kubectl apply -f todoapp-deployment.yaml
kubectl get pods,svc